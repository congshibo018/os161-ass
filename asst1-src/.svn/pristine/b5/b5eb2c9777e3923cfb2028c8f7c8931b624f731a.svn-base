Part1:
The idea is create 2 semaphores, one is âadderMutexâ to avoid multiple threads entering critical region, one is âfinishedâ to tell the main threads all adder threads are finished.
Part2:
The idea is to create a chain of lock in fixed order to prevent deadlock.
Part3:
Itâs a classic producer-consumer problem. First three semaphores were used, âbuffer_mutexâ to avoid multiple threads entering critical region. âbuffer_emptyâ and âbuffer_fullâ to indicate whether the buffer is full, empty or neither. Basically the sum of these two semaphores will be the length of the buffer. If the buffer is empty, new consumer will be put into sleep and wait for the new items. If the buffer is full, new producer will be put into sleep and wait for consumers to consume the items in buffer.
And we also need two indexes âheadâ and âtailâ to indicate where to get the item and put new item.
Part4:
Same idea to the part3, three semaphores were used for producer-consumer problem. Weâve added a semaphore names âwaitâ into each order to help the bartender to awake the sleeping customer threads. Weâre using a pointer queue to store the orders. And a lock names âbottle_lockâ to ensure the bottle statistics are right.
