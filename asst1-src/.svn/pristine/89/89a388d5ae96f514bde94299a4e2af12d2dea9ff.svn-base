#include <types.h>
#include <lib.h>
#include <synch.h>
#include <test.h>
#include <thread.h>

#include "bar.h"
#include "bar_driver.h"



/*
 * **********************************************************************
 * YOU ARE FREE TO CHANGE THIS FILE BELOW THIS POINT AS YOU SEE FIT
 *
 */
static struct barorder order_queue[NCUSTOMERS];
static struct barorder filled_queue[NCUSTOMERS];
int head, tail, filled_count, filled_head, filled_tail, orderid;
static struct semaphore *order_queue_empty;
static struct semaphore *order_queue_full;
static struct cv *filled_queue_empty;
static struct cv *filled_queue_full;
static struct semaphore *queue_mutex;
static struct lock *bottle_lock;
static struct lock *filled_lock;

/* Declare any globals you need here (e.g. locks, etc...) */


/*
 * **********************************************************************
 * FUNCTIONS EXECUTED BY CUSTOMER THREADS
 * **********************************************************************
 */

/*
 * order_drink()
 *
 * Takes one argument referring to the order to be filled. The
 * function makes the order available to staff threads and then blocks
 * until a bartender has filled the glass with the appropriate drinks.
 */

void order_drink(struct barorder *order)
{
        P(order_queue_empty);
	P(queue_mutex);
	order->id = orderid++;
	tail = (tail+1) % NCUSTOMERS;	
	order_queue[tail] = *order;
	V(queue_mutex);	
	V(order_queue_full);
	struct barorder* ret;
	lock_acquire(filled_lock);
	do{
		while(filled_count == 0){
			cv_wait(filled_queue_empty, filled_lock);		
		}
		ret = &filled_queue[filled_head];
	}while(ret->id == order->id);	
	filled_count--;
	filled_head = (filled_head+1) % NCUSTOMERS;	
	cv_signal(filled_queue_full, filled_lock);
	lock_release(filled_lock);
}



/*
 * **********************************************************************
 * FUNCTIONS EXECUTED BY BARTENDER THREADS
 * **********************************************************************
 */

/*
 * take_order()
 *
 * This function waits for a new order to be submitted by
 * customers. When submitted, it returns a pointer to the order.
 *
 */

struct barorder *take_order(void)
{
	P(order_queue_full);
	P(queue_mutex);
	struct barorder *ret = &order_queue[head];
	head = (head+1) % NCUSTOMERS;
	V(queue_mutex);
	V(order_queue_empty);
        return ret;
}


/*
 * fill_order()
 *
 * This function takes an order provided by take_order and fills the
 * order using the mix() function to mix the drink.
 *
 * NOTE: IT NEEDS TO ENSURE THAT MIX HAS EXCLUSIVE ACCESS TO THE
 * REQUIRED BOTTLES (AND, IDEALLY, ONLY THE BOTTLES) IT NEEDS TO USE TO
 * FILL THE ORDER.
 */

void fill_order(struct barorder *order)
{

        /* add any sync primitives you need to ensure mutual exclusion
           holds as described */
	lock_acquire(bottle_lock);
        /* the call to mix must remain */
        mix(order);
	lock_release(bottle_lock);
}


/*
 * serve_order()
 *
 * Takes a filled order and makes it available to (unblocks) the
 * waiting customer.
 */

void serve_order(struct barorder *order)
{	
	lock_acquire(filled_lock);
	while(filled_count == NCUSTOMERS){
		cv_wait(filled_queue_full, filled_lock);
	}
	filled_tail = (filled_tail+1) % NCUSTOMERS;	
	filled_queue[filled_tail] = *order;
	filled_count++;
	cv_signal(filled_queue_empty, filled_lock);
	lock_release(filled_lock);
}



/*
 * **********************************************************************
 * INITIALISATION AND CLEANUP FUNCTIONS
 * **********************************************************************
 */


/*
 * bar_open()
 *
 * Perform any initialisation you need prior to opening the bar to
 * bartenders and customers. Typically, allocation and initialisation of
 * synch primitive and variable.
 */

void bar_open(void)
{
	head = 0; tail = 0;
	filled_count = 0;
	filled_head = 0; filled_tail = 0;
	orderid = 1;
	// create and Initialize semaphores
	order_queue_full = sem_create("order_queue_full", 0);
	KASSERT(order_queue_full != 0); // panics when the order_queue_full is not initialized.

	order_queue_empty = sem_create("order_queue_empty", NCUSTOMERS);
	KASSERT(order_queue_empty != 0); // panics when the order_queue_empty is not initialized.	

	queue_mutex = sem_create("queue_mutex", 1);
	KASSERT(queue_mutex != 0); // panics when the queue_mutex is not initialized.

	filled_queue_full = cv_create("filled_queue_full");
	KASSERT(filled_queue_full != 0); // panics when the filled_queue_full is not initialized.

	filled_queue_empty = cv_create("filled_queue_empty");
	KASSERT(filled_queue_empty != 0); // panics when the filled_queue_empty is not initialized.	

	//create locks
	bottle_lock = lock_create("bottle lock");
        if (bottle_lock == NULL) {
                panic("no memory");
        }
	filled_lock = lock_create("filled lock");
        if (filled_lock == NULL) {
                panic("no memory");
        }
}

/*
 * bar_close()
 *
 * Perform any cleanup after the bar has closed and everybody
 * has gone home.
 */

void bar_close(void)
{
	sem_destroy(order_queue_full);
	sem_destroy(order_queue_empty);
	sem_destroy(queue_mutex);
	cv_destroy(filled_queue_full);
	cv_destroy(filled_queue_empty);
	lock_destroy(bottle_lock);
}

