#include <types.h>
#include <kern/errno.h>
#include <lib.h>
#include <thread.h>
#include <addrspace.h>
#include <vm.h>

/* Place your frametable data-structures here 
 * You probably also want to write a frametable initialisation
 * function and call it from vm_bootstrap
 */
struct frame_table_entry{
  paddr_t p_addr;
  bool used; /*used or not*/
  int next_free;
};
struct frame_table_entry *frame_table = 0;
int first_free;
static struct spinlock stealmem_lock = SPINLOCK_INITIALIZER;
static struct spinlock frame_lock = SPINLOCK_INITIALIZER;

/* Note that this function returns a VIRTUAL address, not a physical 
 * address
 * WARNING: this function gets called very early, before
 * vm_bootstrap().  You may wish to modify main.c to call your
 * frame table initialisation function, or check to see if the
 * frame table has been initialised and call ram_stealmem() otherwise.
 */
void frame_table_init(void){
        spinlock_acquire(&stealmem_lock);

	paddr_t frame_table_size = ram_getsize();/*high address*/
	int i;
	int frame_table_framenum = frame_table_size/PAGE_SIZE;
	paddr_t location = frame_table_size - (frame_table_framenum*sizeof(struct frame_table_entry));
	frame_table = (struct frame_table_entry*)PADDR_TO_KVADDR(location);
	paddr_t frame_table_pointer = ram_getfirstfree();
	for(i =0; i<frame_table_framenum-1;i++){
	    frame_table[i].used = false;
	    frame_table[i].next_free = i+1;
	}
	frame_table[i].used = false;
	frame_table[i].next_free = -1;
	first_free = frame_table_pointer/PAGE_SIZE+1;
	spinlock_release(&stealmem_lock);
	    /*maybe some action on frames for kernel acquired; eg take_one_frame()?*/

}



vaddr_t alloc_kpages(unsigned int npages)
{
        /*
         * IMPLEMENT ME.  You should replace this code with a proper
         *                implementation.
         */
        /*only 1 page allocate at a time*/
        if (npages != 1){
                return 0;
	}

        spinlock_acquire(&frame_lock);
        paddr_t addr;

	if(frame_table == 0){
	        spinlock_acquire(&stealmem_lock);
	        addr = ram_stealmem(npages);
		spinlock_release(&stealmem_lock);
	}else{
	        addr = first_free << 12;
		take_one_frame(first_free);
	}
	spinlock_release(&frame_lock);
        if(addr == 0)
                return 0;
	bzero((void *)PADDR_TO_KVADDR(addr), PAGE_SIZE);
        return PADDR_TO_KVADDR(addr);
}

void free_kpages(vaddr_t addr)
{
        paddr_t paddr = KVADDR_TO_PADDR(addr);
	spinlock_acquire(&frame_lock);
        int frame_index = paddr >> 12;
	if(!frame_table[frame_index].used){
	        spinlock_release(&frame_lock);
		return;
	}
	frame_table[frame_index].used = false;
	frame_table[frame_index].next_free = first_free;
	first_free = frame_index;
	spinlock_release(&frame_lock);
}

void take_one_frame(int i){
        frame_table[i].used = true;
        first_free = frame_table[i].next_free;
}
