#include <types.h>
#include <kern/errno.h>
#include <lib.h>
#include <thread.h>
#include <vm.h>
#include <current.h>
#include <machine/tlb.h>
#include <addrspace.h>
#include <spl.h>
#include <proc.h>

/* Place your page table functions here */

extern int first_free;
static struct spinlock page_table_lock = SPINLOCK_INITIALIZER;
int hpt_size = 0;
void page_table_init(void){
        spinlock_acquire(&page_table_lock);
	paddr_t page_table_size = ram_getsize();
	int entry_num = (page_table_size/PAGE_SIZE)*2;/*twice as many entries as there are frames*/
	int page_num = entry_num*sizeof(struct page_table_entry)/PAGE_SIZE +1;
	page_table = (struct page_table_entry *)PADDR_TO_KVADDR(ram_stealmem(page_num));
	hpt_size = entry_num;
	for(int i = 0; i < entry_num;i ++){
	        page_table[i].vpn = 0;
		page_table[i].pfn = 0;
		page_table[i].pid = 0;
		page_table[i].next_entry = 0;
		page_table[i].dirty = 0;
	}
	spinlock_release(&page_table_lock);

}
void vm_bootstrap(void)
{
        page_table_init();
        frame_table_init();
	
        /* Initialise VM sub-system.  You probably want to initialise your 
           frame table here as well.
        */
}

int
vm_fault(int faulttype, vaddr_t faultaddress)
{

        if(faultaddress == 0){
                return EFAULT;
        }

        vaddr_t faultaddr = faultaddress & PAGE_FRAME;
        struct addrspace* as = proc_getas();
        if(as->region_list->ignore_permissions == false && faulttype == VM_FAULT_READONLY){
                return EFAULT;
        } 

        uint32_t index = hpt_hash(as, faultaddr);
        int pid = curproc->p_pid;
        int found = 0;
        struct page_table_entry* entry = &page_table[index];
        do{
                if(entry->pid == pid && entry->vpn == faultaddr){
                        found = 1;
                        break;
                }
                if(entry->next_entry == 0){
                        break;
                }
                entry = &page_table[entry->next_entry];
        }while(entry != NULL);

        if(found == 1){
                uint32_t entry_hi = entry->vpn, entry_lo = entry->pfn|TLBLO_DIRTY|TLBLO_VALID;
                // TODO: add permissions and PID to the above values.
                int s = splhigh();
                tlb_random(entry_hi, entry_lo);
                splx(s);
                return 0; // TODO: confirm and change the value.
        }
        struct as_region* regions = as->region_list->head;
        found = 0;
        do{
                vaddr_t end = regions->vbase + (regions->npages * PAGE_SIZE);
                if(regions->vbase <= faultaddr && faultaddr < end){
                        found = 1;
                        break;
                }
                regions = regions->next;
        }while(regions != NULL);
  
        if(found == 0){
                if(faultaddr >= as->stack_base && faultaddr < as->stack_top){
                        found = 1; // Space to make changes later for Stack if needed.
                }   
                // else if(faultaddr >= heap_base && faultaddr < heap_top){
                //         found = 1;
                // }
                else{
                        return EFAULT;
                }             

        }
        // TODO: verify the process once
        int frame_num = get_first_free_frame();
        take_one_frame(frame_num);
        paddr_t frame = frame_num << 12;
  
        struct page_table_entry * new_entry = &page_table[index];
        struct page_table_entry * prev_entry = &page_table[index];
        do{
                if(new_entry->pid == 0 && new_entry->vpn == 0){
                        new_entry -> vpn = faultaddr;
                        new_entry -> pfn = frame;
                        new_entry -> pid = pid;
                        new_entry -> next_entry = 0;
                        if(prev_entry != new_entry)
                                prev_entry -> next_entry = index;
                        break;
                }
                prev_entry = &page_table[index];
                index = new_entry->next_entry;
                new_entry = &page_table[index];
        }while(new_entry != NULL);
     
        uint32_t entry_hi = entry->vpn | 0x000; // leaving ASID as )0x000
        uint32_t entry_lo = entry->pfn | TLBLO_DIRTY|TLBLO_VALID; // check if we need to add the dirty and write bits.
        int s = splhigh();
        tlb_random(entry_hi, entry_lo);
        splx(s);
        return 0;
}


/*
*
* Auxillary functions.
*/
uint32_t hpt_hash(struct addrspace *as, vaddr_t faultaddr)
{
        uint32_t index;
        index = (((uint32_t )as) ^ (faultaddr >> PAGE_BITS)) % hpt_size;
        return index;
}

/*
 *
 * SMP-specific functions.  Unused in our configuration.
 */

void
vm_tlbshootdown(const struct tlbshootdown *ts)
{
        (void)ts;
        panic("vm tried to do tlb shootdown?!\n");
}

int get_first_free_frame(void){
        return first_free;
}
