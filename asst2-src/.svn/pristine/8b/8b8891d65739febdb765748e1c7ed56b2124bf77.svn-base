#include <types.h>
#include <kern/errno.h>
#include <kern/fcntl.h>
#include <kern/limits.h>
#include <kern/stat.h>
#include <kern/seek.h>
#include <lib.h>
#include <uio.h>
#include <thread.h>
#include <current.h>
#include <synch.h>
#include <vfs.h>
#include <vnode.h>
#include <file.h>
#include <syscall.h>
#include <copyinout.h>

/*
 * Add your file-related functions here ...
 */
// changed the argument from const char to char*.
int open(char *filename,int flags, mode_t mode){
  /* *vn = current opening file*/
  struct file *file;
  struct vnode *vn;
  int i,j; int errno;
  
  file = kmalloc(sizeof(struct file));
  if(file == NULL){
    errno = ENOMEM;
    return -1;
  }
  int error_code = vfs_open(filename, flags, mode, &vn);
  if(error_code){
    errno = error_code;
    return -1;
  }
  file->f_vnode = vn;

  /*however where to define OFtable still not decided yet so we just implement FDtable first*/
  for (i = 3; i <= __OPEN_MAX; i++){
    if(curproc->FDtable[i] == NULL){
      break;/*i is the index in FDtable*/
    }
  }
  if(i > __OPEN_MAX){
    errno = EMFILE;
    return -1;
  }

  int max_j = (__PID_MAX - __PID_MIN)*__OPEN_MAX;
  for (j = 0; j <= max_j; j++){
    if(OFtable[j] == NULL){
      break;/*j is the index in OFtable*/
    }
  }
  if(j > max_j){
    errno = ENFILE;
    return errno;
  }
  OFtable[j]->file_node = file;/*OFtable not defined yet */
  OFtable[j]->offset = 0;
  OFtable[j]->mode = openflags & O_ACCMODE;

  curproc->FDtable[i] = OFtable[j];
  return 0;
}

int close(int fd){
    int i;int errno;
    if(fd<3|| fd>=__OPEN_MAX|| curproc->FDtable[fd] == NULL){
        errno = EBADF;
        return errno;
    }
    vfs_close(curproc->FDtable[fd]->file_node->f_vnode);
    if(curproc->FDtable[fd]->refcount == 1){
        curproc->FDtable[fd] = NULL;
        kfree(curproc->FDtable[fd]->file_node);
        /*clean OFtable */
        curproc->FDtable[fd]->file_node = NULL;
        curproc->FDtable[fd]->offset = NULL;

        /*clean FDtable */
        curproc->FDtable[fd] = NULL;
    }
    else{
        curproc->FDtable[fd]->refcount--;
        curproc->FDtable[fd] = NULL;
    }

    return 0;
    /*operation on OFtable needed*/
}

ssize_t read(int fd, void *buf, size_t buflen){
    int errno;
    if(fd < 3 || fd >=__OPEN_MAX || curproc ->FDtable[fd] == NULL){
        errno = EBADF;
        return -1;
    } 

    if(curproc->FDtable[fd]->mode == O_WRONLY){
        errno = EBADF;
        return -1;
    }

  	struct iovec iov;
  	struct uio readUio;
    
    uio_kinit(&iov, &readUio, buf, buflen, curproc->FDtable[fd]->offset, UIO_READ);

    readUio->uio_segflg = UIO_USERSPACE;

    ssize_t size = VOP_READ(curproc->FDtable[fd]->file_node->f_vnode, &readUio);

    if(size < 0){
        errno = EIO;
        return errno;
    }
    else{
        return size;        
    }
}



ssize_t write(int fd, const void *buf, size_t nbytes){
    int errno;
    if(fd < 3 || fd >=__OPEN_MAX || curproc ->FDtable[fd] == NULL){
        errno = EBADF;
        return -1;
    } 

    if(curproc->FDtable[fd]->mode == O_RDONLY){
        errno = EBADF;
        return -1;
    }

    struct iovec iov;
    struct uio writeUio;

    uio_kinit(&iov, &readUio, buf, nbytes, curproc->FDtable[fd]->offset, UIO_READ);

    writeUio->uio_segflg = UIO_USERSPACE;

    ssize_t size = VOP_WRITE(curproc->FDtable[fd]->file_node->f_vnode, &readUio);

    if(size < 0){
        errno = EIO;
        return errno;
    }
    else{
        return size;        
    }
}
