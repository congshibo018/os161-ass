The main design decision is about where to place the Open File Table.
We have a global array for the same in main.c.
We use this array to store the details of the open files like vnode, offset, mode in which it 
is opened and the ref_count.

We also create an array of pointers(file descriptor table) in each process to the open file 
table array. this is initialized every time a new array is created and upon creation, we also 
map the stdout and stderr to fd1 and fd2 respectively in the function OFtable_init. 

------------ Open ---------------

Open is mostly a wrapper function around vfs_open which is the Virtual File System(VFS) layer 
that does the actual open of the file. The main function of open function is to
create and maintain the File decriptor table and link the FD to the Open File Table. 
If there is any error from vfs_open, we handle that by returning a non-negetive error number 
corresponding to that error. 
If there is no error from vfs_open, we can create a new entry in the open file table as we have 
successfully opened the file.

------------ Close --------------

Close is also a wrapper function around vfs_close which is part of the VFS layer that does the 
actual closing of the file. we handle the open file table and the file descriptor table at this 
layer.
First we check if the file actually exists in the FD table, if not we throw an error. 
If it exists, then we check the ref_count for the same. 
if the ref_count is 1, we close the file and remove the entries from both 
OFtable and from FDtable. 
if ref_count is greater than one, we reduce the ref_count and simply delink the FDtable entry 
from the Oftable. 

------------ lseek --------------

In the lseek function, we manipulate the file offset depending on the parameters with which it 
is called.

first we check for the file descriptor entry in the FDtable. if it doesnt exist, we throw an 
error else we continue base on the whence parameter which give the starting position for the
manipulation of the offset.

SEEK_SET -> new_offset = position passed to the function.
SEEK_CUR -> new_offset = current_offset + position passed to the function.
SEEK_END -> new_offset = file_end + position passed to the function.

If whence doesn't match any of the above params, we return an error.

------------ dup2 ---------------

This function is used to copy of one file descriptor onto another.
Since the fdtable only contains pointers, we can simply assign the pointer of the old FD to 
the new FD. Then we increase the ref_count of the old FD by one.

------------ read ---------------

This function is used to read already opened files present in the OFtable.
First, we check for the file descriptor entry in the FDtable. if it doesnt exist, we throw an 
error.
Then we need to check if the file mode is read enabled or not. if it is not, we throw the 
corresponding error else, we check if the offset is greater or equal to the end of file. if it is, we return 0. else we go ahead with the read operation without changing the offset value.

----------- write ---------------

This function is used to write to already open files present in the OFtable.
First, we check for the file descriptor entry in the FDtable. if it doesnt exist, we throw an 
error.
Then we need to check if the file mode is write enabled or not. if it is not, we throw the 
corresponding error else, we go ahead with the write opertion.

Both read and write are done using the UIO. the main bulk of both the operations is done by the VOP layer. Our read and write functions are mainly a wrapper function that helps to maintain the abstraction and to take care of the corresponding FDs.
